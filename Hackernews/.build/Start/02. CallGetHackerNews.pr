{
  "Action": {
    "FunctionName": "RunGoal",
    "Parameters": [
      {
        "Type": "string",
        "Name": "goalName",
        "Value": "GetHackerNews"
      },
      {
        "Type": "boolean",
        "Name": "waitForExecution",
        "Value": false
      }
    ],
    "ReturnValue": null
  },
  "Text": "call GetHackerNews run and forget",
  "Reload": false,
  "LlmQuestion": {
    "temperature": null,
    "top_p": null,
    "frequencyPenalty": null,
    "presencePenalty": null,
    "maxLength": 4000,
    "type": "PLang.Modules.CallGoalModule.Builder",
    "system": "\r\n Parse user command, to match the parameters needed for the RunGoal function\r\n\r\nVariables are defined with starting and ending %\r\n\r\nGoalName should be prefixed with !\r\nParameters are optional, they are key value of a variable, if user does not define key, then it is same as value.\r\n\r\n== Examples starts ==\r\n!ParseText then ParseText is goalName, no parameters\r\n!Gmail/Search %query%, then Gmail/Search is goalName,  %query% is key and value in parameters\r\nFolder/Search q=%fileName%, then key is q, and value is %fileName%\r\n== Examples ends ==\r\n\n\nYou MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}]}",
    "question": "call GetHackerNews run and forget",
    "assistant": "## functions available starts ##\r\nvoid RunGoal(String goalName, Dictionary`2<String, Object>? parameters, Boolean? waitForExecution = True, Int32? delayWhenNotWaitingInMilliseconds = 0)  // If backward slash(\\) is used by user, change to forward slash(/).\r\n## functions available ends ##",
    "model": "gpt-4",
    "caching": true,
    "RawResponse": null
  },
  "RunOnBuild": false
}
{
  "Action": {
    "FunctionName": "RenderHtml",
    "Parameters": [
      {
        "Type": "string",
        "Name": "html",
        "Value": "<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Title</th>\n            <th>Created</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var item in Model.items)\n        {\n            <tr>\n                <td>\n                    <a href=\"@item.url\" target=\"news\">@item.title</a>\n                    <small class=\"text-muted\">\n                        @item.num_comments <a href=\"https://news.ycombinator.com/item?id=@item.story_id\" target=\"comment\">comments</a>, \n                        @item.points points, \n                        by @item.author\n                    </small>\n                </td>\n                <td>@item.created_at.ToString(\"g\")</td>\n            </tr>\n        }\n    </tbody>\n</table>"
      },
      {
        "Type": "string",
        "Name": "css",
        "Value": "<style>.table .text-muted {\n    display: block;\n    font-size: 0.75rem;\n}</style>\n"
      },
      {
        "Type": "string",
        "Name": "javascript",
        "Value": ""
      }
    ],
    "ReturnValue": null
  },
  "Text": "[ui] setup table from %items%\n    header: Title, created\n    body: %item.title%, %item.created_at% (nobr)\n        in %item.title% column, show %item.num_comments%, %item.points%, %item.author% in small font\n        make title is clickable, %item.url%, target=news\n        link num_comments, https://news.ycombinator.com/item?id=%item.story_id% (no quotes around story_id), target=comment",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "html",
    "scheme": "{\"html\": string,\n\"javascript\": string,\n\"css\": string}",
    "type": "PLang.Modules.UiModule.Builder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Create the html, javascript and css needed from the user command using Bootstrap 5.0.2 & Fontawesome 5.15.3. \r\n\r\nGoal has series of steps. Steps start with dash(-), steps can have sub steps, substeps are indented and are referenced in previous step by {step#} where # is a number, e.g. {step1}.\r\nVariables are defined with starting and ending %. They are case sensitive so keep them as defined\r\nGoals are prefixed with !, they are for calling a method, e.g. Call !NewUser or reference a goal, such as Edit.goal. To call it use javascript function callGoal(name:string, parameters:object)\r\nDO NOT generate the function callGoal, it will be provided\r\nAll object.Id or object.id are long and needs to be wrapped with single quote('). This does not apply to other id properties e.g. object.object_id\r\nAll properties on variables are case sensitive, keep formatting defined by user.\r\n\r\n  \r\n\r\nHTML comments and <!-- --> are NOT allowed\r\n\r\nJavascript should be vanilla Javascript. popper.min.js and bootstrap.min.js are available. \r\n\r\nUse @Razor templating engine for variables and to go through lists, displaying object or property, see example later\r\n\r\nCss should be using up to date css standards. colors should be in rgb.\r\n\r\nIf a feedback is needed from the user using the html, provide the solution also for that, if it needs javascript, provide javascript, if it needs custom css, provide css\r\n\r\nGoalfile is only provide for context. \r\n\r\nYour job is to build ```html, ```javascript, ```css from the user command and nothing else.\r\n"
          },
          {
            "type": "text",
            "text": "Only write the raw ```html, ```css and ```javascript. No summary, no extra text to explain, be concise"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "\r\n### variables available ###\r\n%items% (type:Object), %item.title% (type:object), %item.created_at% (type:object), %item.num_comments% (type:object), %item.points% (type:object), %item.author% (type:object), %item.url% (type:object), %item.story_id% (type:object), \r\n### variables available ###\r\n### Goalfile ###\r\n(Goal) ShowItems\n- (%step0%) h1 : Hackernews\n- (%step1%) [ui] setup table from %items%\n    header: Title, created\n    body: %item.title%, %item.created_at% (nobr)\n        in %item.title% column, show %item.num_comments%, %item.points%, %item.author% in small font\n        make title is clickable, %item.url%, target=news\n        link num_comments, https://news.ycombinator.com/item?id=%item.story_id% (no quotes around story_id), target=comment\n\r\n### Goalfile ###\r\n### Razor ###\r\nVariables in plural are lists, singular is object. \r\nTo access variable, prefix it with Model.\r\nuse the variable name as the name for the list and when looping through the list. \r\nExample for a tr in a table.\r\n\r\n@foreach (var task in Model.tasks)\r\n{\r\n    <tr>\r\n        <td>@task.Description</td>\r\n        <td>Due date: @task.DueDate</td>\r\n\t\t<td><a href=\"javascript:callGoal('edit.goal', {id:'@task.Id'})\">Edit</a></td>\r\n\t\t<td><button onclick=\"callGoal('delete.goal', {id:'@task.Id'})\">Delete</button></td>\r\n    </tr>\r\n}\r\n\r\n<h3>@Model.book.Title</h3>\r\n\r\n@{\r\n    bool isUserLoggedIn = Model.isLoggedIn;\r\n}\r\n\r\n@if (isUserLoggedIn)\r\n{\r\n    <p>Welcome back, @user.Username!</p>\r\n}\r\nelse\r\n{\r\n    <p>Please log in.</p>\r\n}\r\n### Razor ###"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "[ui] setup table from %items%\n    header: Title, created\n    body: %item.title%, %item.created_at% (nobr)\n        in %item.title% column, show %item.num_comments%, %item.points%, %item.author% in small font\n        make title is clickable, %item.url%, target=news\n        link num_comments, https://news.ycombinator.com/item?id=%item.story_id% (no quotes around story_id), target=comment"
          }
        ]
      }
    ],
    "model": "gpt-4",
    "caching": true,
    "RawResponse": "```html\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th>Title</th>\n            <th>Created</th>\n        </tr>\n    </thead>\n    <tbody>\n        @foreach (var item in Model.items)\n        {\n            <tr>\n                <td>\n                    <a href=\"@item.url\" target=\"news\">@item.title</a>\n                    <small class=\"text-muted\">\n                        @item.num_comments <a href=\"https://news.ycombinator.com/item?id=@item.story_id\" target=\"comment\">comments</a>, \n                        @item.points points, \n                        by @item.author\n                    </small>\n                </td>\n                <td>@item.created_at.ToString(\"g\")</td>\n            </tr>\n        }\n    </tbody>\n</table>\n```\n\n```css\n.table .text-muted {\n    display: block;\n    font-size: 0.75rem;\n}\n```\n\n```javascript\n// No javascript needed\n```"
  },
  "RunOnBuild": false
}
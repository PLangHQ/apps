You are going to help me write code in a natural language programming language called plang. Here are the rules the the language

Following rules are for plang language
- Goal name start at the beginning of file, it works like a function
- A step is each line starting with dash(-), step can be multiple lines but then the line does not start with dash
- Variables start and end with %
- step starting with dash(/) is a comment
- A file is divided into on or more Goals, in each Goal there are one or more Steps
- APIs are located in 'api' folder
- UI is located in the 'ui' folder
- Events are located in 'events' folder
- Console is the default output, unless otherwise defined. UI examples are only for desktop/web apps
- Database setup such as creating tables and inserting default values should be in Setup.goal file
- Start is the main entry point into the app
- You CANNOT USE "- else" step in plang. It does NOT EXSIST
- When else statement is needed, this is the approximate syntax: '- if \%isTrue\%, then call !TrueGoal, else call !FalseGoal' (in the same step). Place the goals called in the if statement in the same file.
- if user defines a console app, ignore plang code example from Tests\Ui\*
- API keys or other settings are retrieved by using \%Settings.SETTING_NAME\%, choose appropriate name for SETTING_NAME
- You must generate all the files needed, such as Setup.goal and Start.goal. File name should have the extension .goal
- First item in an array starts at 1.
- http responses in json can be access using a variable, e.g. if \%response\% is {name:"John", addresses:[{street:'Johnson street'}]}, it can be access as \%response.name\% and \%response.addresses[1].street\%
- conditions can only contain primative variables, not sql statements or other complex algorithms
- when updating/inserting/deleting multiple tables use transaction
- id and foreign id keys in tables are long
- data source is created automatically, creating a datasource is only needed if multiple databases are used.

Your response:
    fileNameWithRelativePath: examples /%appName/Start.goal, /%appName%/User/Edit.goal
    code in the json scheme should contain all plang code.
    Give the app a name.

The cssSelector(s) used to find the content is: %cssSelectors%

This is the html content of the page being scraped:
=== html ===
%html%
=== html ===

Build me an plang application from user request, focus on writing plang code:

Here is an example of plang code that scrapes a website, use it to build the plang code.

=== Plang Example ===
%examples%
=== Plang Example ===
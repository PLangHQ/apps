{
  "Action": {
    "Name": "ExtractParametersFromFileContent",
    "Code": "\nusing System;\nusing System.Text.RegularExpressions;\nusing PLang.SafeFileSystem;\n\npublic static class ExtractParametersFromFileContent\n{\n    public static void Process(PLangFileSystem fileSystem, dynamic? fileαContent, out string parameters)\n    {\n        if (fileαContent == null)\n            throw new Exception(\"File content is not provided.\");\n\n        string content = fileαContent.ToString();\n        string pattern = @\"\\.PARAMETER\\s+(?<ParameterName>\\w+)\\s+(?<ParameterDescription>.+?)(?=\\.PARAMETER|\\.EXAMPLE|$)\";\n        RegexOptions options = RegexOptions.Multiline;\n\n        MatchCollection matches = Regex.Matches(content, pattern, options);\n        string result = \"\";\n\n        foreach (Match match in matches)\n        {\n            result += $\"{match.Groups[\"ParameterName\"].Value}:{match.Groups[\"ParameterDescription\"].Value}\\n\";\n        }\n\n        parameters = result;\n    }\n}\n",
    "Using": [
      "System",
      "System.Text.RegularExpressions",
      "PLang.SafeFileSystem"
    ],
    "InputParameters": {
      "fileSystem": "PLangFileSystem",
      "file.Content": "dynamic?",
      "parameters": "string"
    },
    "OutParameterDefinition": {
      "parameters": {
        "Name": "parameters",
        "FullTypeName": "System.String"
      }
    },
    "GoalToCallOnTrue": null,
    "GoalToCallOnFalse": null
  },
  "Text": "[code] get all PARAMETER from %file.Content%\n    using regex: \\.PARAMETER\\s+(?<ParameterName>\\w+)\\s+(?<ParameterDescription>.+?)(?=\\.PARAMETER|\\.EXAMPLE|$)\n     search multiline\n    only return in the format ParameterName:ParameterDescription foreach parameter\n    seperated by new line\n    write to %parameters%(string)",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "csharp",
    "scheme": "{\"OutParameterDefinition\"? : { String : ParameterType, ... } = null,\n\"Name\": string,\n\"Using\"?: string[] = null,\n\"Assemblies\"?: string[] = null}",
    "type": "PLang.Modules.CodeModule.Builder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Act as a senior C# developer, that converts the user statement into a C#(Version. 9) code. \r\n\r\n## Rules ##\r\n- Generate static class. The code generated should have 1 method with the static method named Process and return void. \r\n- A variable in user intent is defined by starting and ending %.\r\n- Variables defined in the user intent can be passed into the Process function by value, but only if defined by user intent. \r\n- Variable names passed to Process function MUST be unmodified from the user statement\r\n- The code will not be modified after you generate it.\r\n- If condition fails, throw Exception, unless defined otherwise by user command\r\n- Exception message should be for non-technical user\r\n- ALWAYS use long or long? instead of int or int?\r\n- Do not reference any DTO classes. Use dynamic? if complex object is needed, else use object?.\r\n- Strings are defined with double quote (\")\r\n- Any class from System.IO, should be replaced with PLang.SafeFileSystem.PLangFileSystem. It contains same classes and methods. \r\n- If PLangFileSystem is needed, add parameter PLang.SafeFileSystem.PLangFileSystem fileSystem into Process method, but ONLY if needed. Assembly for PLangFileSystem is already include, do not list it in Assemblies response.\r\n- When condition is checking if variable is null, the variable needs to be defined with ? in the parameter, e.g. Process(dynamic? variable)\r\n- Variables that are injected into Process method and contain dot(.), then replace dot(.) with the letter α in the parameter list. e.g. %user.id% to userαid, %product.items[0].title% to productαitemsα0ααtitle, %list[1]% to listα1α\r\n- Keep underscore in variables if defined by user, e.g.  if %data.user_id%(string) is null => Process(string? dataαuser_id)\r\n- Consider top security measures when generating code and validate code\r\n## Rules ##\r\n\r\n## Response information ##\r\n- Name: is name of class, it should represent the intent of what the code is doing. \r\n\r\n- Using: must include namespaces that are needed to compile code.\r\n- Assemblies: dll to reference to compile using Roslyn\r\n- ParameterType: { Name:string, FullTypeName:string }\r\n- OutParameterDefinition: If there is out parameter that is ExpandoObject return the names and types that are in the ExpandoObject in OutParameterDefinition, the string in the Dictionary is the name of the out object\r\n## Response information ##\r\n",
            "image_url": null
          },
          {
            "type": "text",
            "text": "Only write the raw c# code and json scheme, no summary, no extra text to explain, be concise.\r\n\tYOU MUST implement all code needed and valid c# code. \r\n\tYou must return ```csharp for the code implementation and ```json scheme: {\"OutParameterDefinition\"? : { String : ParameterType, ... } = null,\n\"Name\": string,\n\"Using\"?: string[] = null,\n\"Assemblies\"?: string[] = null}",
            "image_url": null
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## defined variables ##\r\nfile.Content (type:object), parameters (type:List`1<String>), \r\n## defined variables ##",
            "image_url": null
          },
          {
            "type": "text",
            "text": "\r\n## examples ##\r\n%list.Count%*50, write to %result% => Process(long? listαCount,  out long result) {\r\n    //validate input parameter \r\n    result = listαCount*50;\r\n}\r\n%response.data.total%*%response.data.total_amount%, write to %allTotal%, => Process(dynamic? response, out long allTotal) { \r\n      //validate input parameter \r\n      long allTotal = response.data.total*response.data.total_amount;\r\n}\r\n## examples ##",
            "image_url": null
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "[code] get all PARAMETER from %file.Content%\n    using regex: \\.PARAMETER\\s+(?<ParameterName>\\w+)\\s+(?<ParameterDescription>.+?)(?=\\.PARAMETER|\\.EXAMPLE|$)\n     search multiline\n    only return in the format ParameterName:ParameterDescription foreach parameter\n    seperated by new line\n    write to %parameters%(string)",
            "image_url": null
          }
        ]
      }
    ],
    "model": "gpt-4",
    "caching": true,
    "RawResponse": "```csharp\nusing System;\nusing System.Text.RegularExpressions;\nusing PLang.SafeFileSystem;\n\npublic static class ExtractParametersFromFileContent\n{\n    public static void Process(PLangFileSystem fileSystem, dynamic? fileαContent, out string parameters)\n    {\n        if (fileαContent == null)\n            throw new Exception(\"File content is not provided.\");\n\n        string content = fileαContent.ToString();\n        string pattern = @\"\\.PARAMETER\\s+(?<ParameterName>\\w+)\\s+(?<ParameterDescription>.+?)(?=\\.PARAMETER|\\.EXAMPLE|$)\";\n        RegexOptions options = RegexOptions.Multiline;\n\n        MatchCollection matches = Regex.Matches(content, pattern, options);\n        string result = \"\";\n\n        foreach (Match match in matches)\n        {\n            result += $\"{match.Groups[\"ParameterName\"].Value}:{match.Groups[\"ParameterDescription\"].Value}\\n\";\n        }\n\n        parameters = result;\n    }\n}\n```\n```json\n{\n  \"Name\": \"ExtractParametersFromFileContent\",\n  \"Using\": [\"System\", \"System.Text.RegularExpressions\", \"PLang.SafeFileSystem\"],\n  \"OutParameterDefinition\": {\n    \"parameters\": {\n      \"Name\": \"parameters\",\n      \"FullTypeName\": \"System.String\"\n    }\n  }\n}\n```"
  },
  "RunOnBuild": false
}
{
  "Action": {
    "FunctionName": "InsertEventSourceData",
    "Parameters": [
      {
        "Type": "Int64",
        "Name": "id",
        "Value": "%eventData.id%"
      },
      {
        "Type": "String",
        "Name": "data",
        "Value": "%eventData.data%"
      },
      {
        "Type": "String",
        "Name": "keyHash",
        "Value": "%eventData.key_hash%"
      }
    ],
    "ReturnValue": null
  },
  "Text": "insert event source data into db, %eventData.id%, %eventData.data%, %eventData.key_hash%",
  "Reload": false,
  "LlmRequest": {
    "temperature": 0.0,
    "top_p": 0.0,
    "frequencyPenalty": 0.0,
    "presencePenalty": 0.0,
    "maxLength": 4000,
    "llmResponseType": "json",
    "scheme": "{\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}",
    "type": "PLang.Modules.DbModule.Builder",
    "promptMessage": [
      {
        "role": "system",
        "content": [
          {
            "type": "text",
            "text": "Generate the SQL statement from user command. \r\nThe SQL statement MUST be a valid SQL statement for sqlite. \r\nMake sure to use correct data types that match sqlite\r\nYou MUST provide Parameters if SQL has @parameter.\r\n"
          },
          {
            "type": "text",
            "text": "You MUST respond in JSON, scheme:\r\n {\"FunctionName\": string,\n\"Parameters\": [{\"Type\": string,\n\"Name\": string,\n\"Value\": object}],\n\"ReturnValue\"?: [{\"Type\": string,\n\"VariableName\": string}] = null}"
          }
        ]
      },
      {
        "role": "assistant",
        "content": [
          {
            "type": "text",
            "text": "## functions available defined in csharp ##\r\nCreateDataSource(String? name = \"data\", String? localPath, String? databaseType = \"sqlite\", Boolean? setAsDefaultForApp = False, Boolean? keepHistoryEventSourcing = False)  : void  // localPath is location of the database on the drive for sqlite. localPath can be string with variables, default is null. \nSetDataSourceName(String name, String? localPath)  : IError \nBeginTransaction()  : void \nEndTransaction()  : void \nRollback()  : void \nLoadExtension(String fileName, String? procName)  : Error \nGetDatabaseStructure()  : ValueTuple`2  // Returns tables and views in database with the columns description. \nInsertEventSourceData(Int64 id, String data, String keyHash)  : ValueTuple`2 \nExecute(String sql, String? dataSourceName)  : ValueTuple`2 \nCreateTable(String sql, String? dataSourceName)  : ValueTuple`2 \nSelectOneRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : ValueTuple`2 \nSelect(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : ValueTuple`2 \nUpdate(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : ValueTuple`2 \nDelete(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : ValueTuple`2 \nInsert(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : ValueTuple`2  // Basic insert statement. Will return affected row count. \nInsertAndSelectIdOfInsertedRow(String sql, List`1<Object>? SqlParameters, String? dataSourceName)  : ValueTuple`2  // Insert statement that will return the id of the inserted row. Use only if user requests the id. \nInsertBulk(String tableName, List`1<Object> items, String? dataSourceName)  : ValueTuple`2  // Insert a list(bulk) into database, return number of rows inserted. \nGetAdditionalSystemErrorInfo()  : String \nGetAdditionalAssistantErrorInfo()  : ValueTuple`2 \n\r\n## functions available ends ##\r\n"
          }
        ]
      },
      {
        "role": "user",
        "content": [
          {
            "type": "text",
            "text": "insert event source data into db, %eventData.id%, %eventData.data%, %eventData.key_hash%"
          }
        ]
      }
    ],
    "model": "gpt-4o",
    "caching": true,
    "RawResponse": "```json\n{\n  \"FunctionName\": \"InsertEventSourceData\",\n  \"Parameters\": [\n    {\n      \"Type\": \"Int64\",\n      \"Name\": \"id\",\n      \"Value\": \"%eventData.id%\"\n    },\n    {\n      \"Type\": \"String\",\n      \"Name\": \"data\",\n      \"Value\": \"%eventData.data%\"\n    },\n    {\n      \"Type\": \"String\",\n      \"Name\": \"keyHash\",\n      \"Value\": \"%eventData.key_hash%\"\n    }\n  ]\n}\n```"
  },
  "RunOnBuild": false
}